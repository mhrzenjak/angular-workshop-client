Radionica hodogram

/*******************************************************************\
1 - Angular Seed
\*******************************************************************/
1. instalacija VS Code
2. instalacija nodejs
3. instalacija git for windows
4. otvaranje command prompta i navigiranje u 탑eljeni folder
5. git clone https://github.com/angular/quickstart.git quickstart
6. cd quickstart
7. npm install
8. code .
9. npm start
10. otvoriti u browser
11. ctrl + c (prekinuti server)
12. File -> Preferences -> Settings
Dodati:
    "files.exclude": {
        "node_modules/": true,
        "**/.git": true,
		"**/.DS_Store": true,
		"**/*.js.map": true,
		"**/*.js": {"when": "$(basename).ts"}
    }
13. Extensions -> icons -> install -> reload
14. File -> Preferences -> File Icon Theme

/*******************************************************************\
2 - Aplikacijski modul i Layout
\*******************************************************************/
1. npm install bootstrap@3 --save
2. index.html preurediti u:
<!DOCTYPE html>
<html>

<head>
  <title>Angular Webshop</title>
  <base href="/">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="node_modules/bootstrap/dist/css/bootstrap.css">
  <link rel="stylesheet" href="assets/css/styles.css">
</head>

<body>
  <webshop-app>Loading AppComponent content here ...</webshop-app>
</body>

<script src="assets/js/jquery-3.2.1.js"></script>
<script src="node_modules/bootstrap/dist/js/bootstrap.js"></script>

<script src="node_modules/core-js/client/shim.min.js"></script>
<script src="node_modules/zone.js/dist/zone.js"></script>
<script src="node_modules/systemjs/dist/system.src.js"></script>
<script src="systemjs.config.js"></script>

<script>
  System.import('main.js').catch(function (err) { console.error(err); });
</script>

</html>
3. preurediti app.component.ts u:
import { Component } from '@angular/core';

@Component({
  selector: 'webshop-app',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent  { }
4. kreirati assets folder pod src
5. kreirati images folder pod assets
6. dodati sliku (banner.png) u assets folder
7. preuzeti template sa http://getbootstrap.com/examples/offcanvas/ i kopirati ga u app.component.html
8. preurediti app.component.html u:
<nav class="navbar navbar-fixed-top navbar-inverse">
	<div class="container">
		<div class="navbar-header">
			<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false"
			 aria-controls="navbar">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
			<a class="navbar-brand" href="#">Angular Webshop</a>
		</div>
		<div id="navbar" class="collapse navbar-collapse">
			<ul class="nav navbar-nav">
				<li class="active"><a href="#">Home</a></li>
				<li><a href="#about">About</a></li>
				<li><a href="#contact">Contact</a></li>
			</ul>
		</div>
	</div>
</nav>

<div class="container">
	<div class="row">
		<div class="col-xs-12 col-sm-3" id="sidebar">
			<div class="list-group">
				<a href="#" class="list-group-item active">Link</a>
				<a href="#" class="list-group-item">Link</a>
				<a href="#" class="list-group-item">Link</a>
				<a href="#" class="list-group-item">Link</a>
				<a href="#" class="list-group-item">Link</a>
				<a href="#" class="list-group-item">Link</a>
				<a href="#" class="list-group-item">Link</a>
				<a href="#" class="list-group-item">Link</a>
				<a href="#" class="list-group-item">Link</a>
				<a href="#" class="list-group-item">Link</a>
			</div>
		</div>

		<div class="col-xs-12 col-sm-9" id="content">
			<div class="jumbotron">
				<img src="assets/images/banner.png" class="img-responsive"/>
				<p>This is an example to show the potential of an offcanvas layout pattern in Bootstrap. Try some responsive-range viewport
					sizes to see it in action.</p>
			</div>
			<div class="row">
				<div class="col-xs-12 col-lg-4">
					<h2>Heading</h2>
					<p>Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum
						nibh, ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis euismod. Donec sed odio dui.
						</p>
					<p><a class="btn btn-default" href="#" role="button">View details &raquo;</a></p>
				</div>
				<div class="col-xs-12 col-lg-4">
					<h2>Heading</h2>
					<p>Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum
						nibh, ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis euismod. Donec sed odio dui.
						</p>
					<p><a class="btn btn-default" href="#" role="button">View details &raquo;</a></p>
				</div>
				<div class="col-xs-12 col-lg-4">
					<h2>Heading</h2>
					<p>Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum
						nibh, ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis euismod. Donec sed odio dui.
						</p>
					<p><a class="btn btn-default" href="#" role="button">View details &raquo;</a></p>
				</div>
			</div>
		</div>
	</div>

	<hr>

	<footer>
		<p>&copy; 2016 Company, Inc.</p>
	</footer>
</div>
9. kopirati u styles.css iz view-source http://getbootstrap.com/examples/offcanvas/offcanvas.css:
html,
body {
  overflow-x: hidden; /* Prevent scroll on narrow devices */
}
body {
  padding-top: 70px;
}
footer {
  padding: 30px 0;
}
10. kreirati css folder pod assets folderom
11. premjestiti styles.css u css folder
12. promijeniti index.html:
<link rel="stylesheet" href="assets/css/styles.css">
13. pokrenuti aplikaciju i provjeriti konzolu (jquery error)
14. kreirati js folder u assets folderu
15. preuzeti jquery i staviti ga u js folder
16. dodati u index.html prije bootstrap.js-a:
<script src="assets/js/jquery-3.2.1.js"></script>
17. ponovno provjeriti konzolu
18. izdvojiti html u app.component.html datoteku
19. postaviti templateURL u app.component.ts:
templateUrl: './app.component.html'
20. kreirati app.component.css i dodati:
h2{
    color: cornflowerblue;
}
21. u app.component.ts dodati:
styleUrls: ['./app.component.css']

/*******************************************************************\
3 - Popis kategorija
\*******************************************************************/
1. kreitati folder categories unutar app foldera
2. kreirati category-list folder unutar categories foldera
3. kreirati datoteku category-list.comonent.ts unutar tog foldera i popuniti je sa:
import { Component } from '@angular/core';

@Component({
  selector: 'category-list',
  templateUrl: './category-list.component.html'
})
export class CategoryListComponent{
    
}
4. u category-list.comonent.ts dodati:
categoryList: Array<string> = [
	"Rock",
	"Punk",
	"Pop",
	"Techno",
	"House",
	"Klasi훾na glazba",
	"Ostalo"
];
5. kreirati datoteku category-list.component.html
6. u category-list.comonent.html dodati:
<a href="#" class="list-group-item" *ngFor="let category of categoryList">{{category}}</a>
7. u app.component.html zamijeniti stati훾ne linkove u sidebaru sa:
<category-list></category-list>
8. pokrenuti/pogledati aplikaciju i pokazati konzolu sa erorom
9. u app.module.ts dodati:
import { CategoryListComponent }  from './categories/category-list/category-list.component';
declarations: [ AppComponent, CategoryListComponent ],
10. provjeriti aplikaciju i vidjeti da linkovi ne vode nikamo
11. kreirati category-list.model.ts i popuniti sa:
export class CategoryListModel{
     id: number;
     name: string;
}
12. dodati u category-list.component.ts:
import { CategoryListModel } from "./category-list.model";
13. zamijeniti category-list varijablu sa:
categoryList: Array<CategoryListModel> = [
        {id: 1, name: "Rock"},
        {id: 2, name: "Punk"},
        {id: 3, name: "Pop"},
        {id: 4, name: "Techno"},
        {id: 5, name: "House"},
        {id: 6, name: "Klasi훾na glazba"},
        {id: 7, name: "Ostalo"}
    ];
14. promijeniti category-list.component.html na:
<a [href]="category.id" class="list-group-item" *ngFor="let category of categoryList">{{category.name}}</a>
15. pokazati da se url ne resolvea
16. extensions -> debugger for chrome -> install -> reload
17. otvoriti bs-config.json i preurediti u:
{
  "server": {
    "baseDir": "src",
    "routes": {
      "/node_modules": "node_modules"
    }
  },
    "open": false
}
18. Debug -> open configurations
19. upisati:
{
    "version": "0.2.0",
    "configurations": [
        {
            "type": "chrome",
            "request": "launch",
            "name": "Launch Chrome against localhost",
            "url": "http://localhost:3000",
            "sourceMaps": true,
            "webRoot": "${workspaceRoot}/src"
        }
    ]
}
20. testirati debugging

/*******************************************************************\
4 - Routing
\*******************************************************************/
1. kreirati folder category unutar categories foldera
2. kreirati datoteku category.component.ts
3. kreirati datoteku category.component.html
4. kreirati datoteku category.model.ts
5. u category.model.ts dodati:
export class CategoryModel{
     id: number;
     name: string;
     productList: any;
}
4. u category.component.ts dodati:
import { Component, OnInit } from '@angular/core';

import { CategoryModel } from "./category.model";

@Component({
  selector: 'category',
  templateUrl: './category.component.html'
})
export class CategoryComponent{
    category: CategoryModel;
	
	ngOnInit(): void{
		this.category = new CategoryModel();
		this.category.id = 0;
		this.category.name = "Odaberite kategoriju";
	}
}
5. u category.component.html dodati:
<div class="col-xs-12">
    <h1>{{category.id}} - {{category.name}}</h1>
</div>
6. u category.component.html premjestiti iz app.component.html:
<div class="col-xs-12 col-lg-4">
    <h2>Heading</h2>
    <p>Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum
        nibh, ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis euismod. Donec sed odio dui.
    </p>
    <p><a class="btn btn-default" href="#" role="button">View details &raquo;</a></p>
</div>
<div class="col-xs-12 col-lg-4">
    <h2>Heading</h2>
    <p>Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum
        nibh, ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis euismod. Donec sed odio dui.
    </p>
    <p><a class="btn btn-default" href="#" role="button">View details &raquo;</a></p>
</div>
<div class="col-xs-12 col-lg-4">
    <h2>Heading</h2>
    <p>Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum
        nibh, ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis euismod. Donec sed odio dui.
    </p>
    <p><a class="btn btn-default" href="#" role="button">View details &raquo;</a></p>
</div>
7. dodati category u app.module.ts:
import { CategoryComponent }  from './categories/category/category.component';

declarations: [ AppComponent, CategoryListComponent, CategoryComponent ],

8. promijeniti content dio app.component.html u:
<div class="col-xs-12 col-sm-9" id="content">
			<div class="jumbotron">
				<img src="assets/images/banner.png" class="img-responsive" />
				<p>This is an example to show the potential of an offcanvas layout pattern in Bootstrap. Try some responsive-range viewport
					sizes to see it in action.</p>
			</div>
			<div class="row">
				<category></category>
			</div>
		</div>
9. pogledati aplikaciju
10. kreirati dashboard folder unutar app foldera
11. kreirati dashboard.component.ts i dashboard.component.html unutar dashboard foldera
12. premjestiti jumbotron iz app.component.html u dashboard.component.html i promijeniti u smisleni text:
<div class="jumbotron">
    <img src="assets/images/banner.png" class="img-responsive" />
    <p>Dobrodo큄li u primjer webshopa razvijenog u Angularu.</p>
</div>
13. kopirati iz category.component.html u dashboard.component.html nakon jumbotrona:
<div class="col-xs-12 col-lg-4">
    <h2>Heading</h2>
    <p>Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum
        nibh, ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis euismod. Donec sed odio dui.
    </p>
    <p><a class="btn btn-default" href="#" role="button">View details &raquo;</a></p>
</div>
<div class="col-xs-12 col-lg-4">
    <h2>Heading</h2>
    <p>Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum
        nibh, ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis euismod. Donec sed odio dui.
    </p>
    <p><a class="btn btn-default" href="#" role="button">View details &raquo;</a></p>
</div>
<div class="col-xs-12 col-lg-4">
    <h2>Heading</h2>
    <p>Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum
        nibh, ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis euismod. Donec sed odio dui.
    </p>
    <p><a class="btn btn-default" href="#" role="button">View details &raquo;</a></p>
</div>
13. popuniti dashboard.component.ts sa:
import { Component } from "@angular/core";

@Component({
	selector: 'dashboard',
	templateUrl: './dashboard.component.html'
})
export class DashboardComponent{}
14. u app.module.ts dodati:
import { DashboardComponent } from "./dashboard/dashboard.component";

declarations: [AppComponent, CategoryListComponent, CategoryComponent, DashboardComponent],
15. izmjeniti category tag sa dashboard u app.component.html
16. pokrenuti aplikaciju
17. u app.module.ts dodati:
import { RouterModule }   from '@angular/router';

  imports: [
    BrowserModule,
    RouterModule.forRoot([
      {
        path: 'dashboard',
        component: DashboardComponent
      },
      {
        path: 'category/:id',
        component: CategoryComponent
      },
      {
        path: '**',
        component: DashboardComponent
      }
    ])
  ],
18. promijeniti content dio app.component.html u:
<div class="col-xs-12 col-sm-9" id="content">
			<div class="row">
				<router-outlet></router-outlet>
			</div>
		</div>
19. promijeniti category-list.component.html u:
<a class="list-group-item" *ngFor="let category of categoryList" [routerLink]="['/category', category.id]" routerLinkActive="active">{{category.name}}</a>
20. dodati u category.component.ts:
import { ActivatedRoute, Params }   from '@angular/router';

	constructor(private route: ActivatedRoute){}

	ngOnInit(): void {
		var component = this;
		this.category = new CategoryModel();
		this.route.params.subscribe(
			function (params: Params) {
				component.category.id = params["id"];
				component.category.name = "Placeholder";
			}
		);
	}
21. pokrenuti aplikaciju
22. promijeniti u category.component.ts:
ngOnInit(): void{
	this.route.params.subscribe(
		params => {
			this.name = params["id"];
		}
	);
}
23. pokrenuti aplikaciju

/*******************************************************************\
5 - Servisi
\*******************************************************************/
1. kreirati shared folder pod categories
2. kreirati category.service.ts u shared folderu i popuniti sa:
import { Injectable } from '@angular/core';
import { CategoryListModel } from "../category-list/category-list.model";

@Injectable()
export class CategoryService {

}
2. preseliti iz category-list.component.ts u category.service.ts:
  categoryList: Array<CategoryListModel> = [
    { id: 1, name: "Rock" },
    { id: 2, name: "Punk" },
    { id: 3, name: "Pop" },
    { id: 4, name: "Techno" },
    { id: 5, name: "House" },
    { id: 6, name: "Klasi훾na glazba" },
    { id: 7, name: "Ostalo" }
  ];
3. preurediti category.service.ts u:
    categoryList: Array<CategoryListModel> = [
        { id: 1, name: "Rock" },
        { id: 2, name: "Punk" },
        { id: 3, name: "Pop" },
        { id: 4, name: "Techno" },
        { id: 5, name: "House" },
        { id: 6, name: "Klasi훾na glazba" },
        { id: 7, name: "Ostalo" }
    ];

    getCategories(): Array<CategoryListModel>{

        return this.categoryList;
    }

    getCategory(id: number): CategoryModel{

        return this.categoryList.find(x => x.id == id) as CategoryModel;
    }
4. preurediti category-list.component.ts u:
import { Component, OnInit } from '@angular/core';
import { CategoryListModel } from "./category-list.model";
import { CategoryService } from "../shared/category.service";

@Component({
  selector: 'category-list',
  templateUrl: './category-list.component.html'
})
export class CategoryListComponent{
    categoryList: Array<CategoryListModel>;

    constructor(private categoryService: CategoryService){}

    ngOnInit(): void{
        this.categoryList = this.categoryService.getCategories();
    }
}
5. pogledati aplikaciju, primjetiti error za nedostatak providera
6. dodati u app.module.ts:
import { CategoryService } from "./categories/shared/category.service";

providers: [ CategoryService ],
7. pokrenuti aplikaciju
8. preurediti category.component.ts u:
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Params } from '@angular/router';

import { CategoryModel } from "./category.model";

import { CategoryService } from "../shared/category.service";

@Component({
	selector: 'category',
	templateUrl: './category.component.html'
})
export class CategoryComponent {

	category: CategoryModel;

	constructor(
		private route: ActivatedRoute,
		private categoryService: CategoryService
	) { }

	ngOnInit(): void {
		this.category = new CategoryModel();
		this.route.params.subscribe(
			params => {
				this.category = this.categoryService.getCategory(params["id"]);
			}
		);
	}
}


/*******************************************************************\
6 - Observable i dvosmjerni servis
\*******************************************************************/
1. preurediti category.service.ts u:
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/of';

import { CategoryListModel } from "../category-list/category-list.model";

import { CategoryModel } from "../category/category.model";

@Injectable()
export class CategoryService {

    categoryList: Array<CategoryListModel> = [
        { id: 1, name: "Rock" },
        { id: 2, name: "Punk" },
        { id: 3, name: "Pop" },
        { id: 4, name: "Techno" },
        { id: 5, name: "House" },
        { id: 6, name: "Klasi훾na glazba" },
        { id: 7, name: "Ostalo" }
    ];

    getCategories(): Observable<Array<CategoryListModel>>{

        return Observable.of(this.categoryList);
    }

    getCategory(id: number): Observable<CategoryModel>{

        return Observable.of(this.categoryList.find(x => x.id == id) as CategoryModel);
    }
}
2. izmjeniti category-list.component.ts u:
import { Component, OnInit } from '@angular/core';

import { CategoryListModel } from "./category-list.model";

import { CategoryService } from "../shared/category.service";

@Component({
    selector: 'category-list',
    templateUrl: './category-list.component.html'
})
export class CategoryListComponent {

    categoryList: Array<CategoryListModel>;

    constructor(private categoryService: CategoryService) { }

    ngOnInit(): void {

        this.categoryService.getCategories().subscribe(
            value => {
                this.categoryList = value;
            },
            error => {
                console.log(error);
            });
    }
}
3. izmjeniti category.component.ts u:
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Params } from '@angular/router';

import { CategoryModel } from "./category.model";

import { CategoryService } from "../shared/category.service";

@Component({
	selector: 'category',
	templateUrl: './category.component.html'
})
export class CategoryComponent {

	category: CategoryModel;

	constructor(
		private route: ActivatedRoute,
		private categoryService: CategoryService
	) { }

	ngOnInit(): void {

		this.category = new CategoryModel();
		
		this.route.params.subscribe(
			params => {
				this.categoryService.getCategory(params["id"]).subscribe(
					value => {
						this.category = value;
					},
					error => {
						console.log(error);
					});
			}
		);
	}
}
4. dodati u category.service.ts:
import { Subject } from 'rxjs/Subject';

    selectedCategorySubject: Subject<number>;

    selectedCategoryChanged: Observable<number> = this.selectedCategorySubject.asObservable();
	
	selectCategory(id: number){

        this.selectedCategorySubject.next(id);
    }
5. dodati u category.component.ts:
	selectNextCategory(){

		this.categoryService.selectCategory(this.category.id + 1);
	}

	selectPreviousCategory(){

		this.categoryService.selectCategory(this.category.id - 1);
	}
6. dodati u category.component.html:
	<h1>{{category.id}} - {{category.name}}</h1>
    <a class="btn btn-primary" (click)="selectPreviousCategory()">Prethodna kategorija</a>
    <a class="btn btn-primary" (click)="selectNextCategory()">Sljede훶a kategorija</a>
7. izmjeniti category-list.component.ts u:
import { Router } from "@angular/router";

    constructor(
        private categoryService: CategoryService,
        private router: Router
        ) { }
		
    ngOnInit(): void {

        this.categoryService.getCategories().subscribe(
            value => {
                this.categoryList = value;
            },
            error => {
                console.log(error);
            });

        this.categoryService.selectedCategoryChanged.subscribe(
            value => {
                this.router.navigate(['/category', value]);
            },
            error => {
                console.log(error);
            });
    }
8. pokrenuti aplikaciju i uo훾iti problem oko nepostoje훶ih id-eva
9. dodati u category-list.component.ts:
	private doesCategoryExist(id: number): boolean {
        return this.categoryList.find(x => x.id == id) !== undefined;
    }
	
        this.categoryService.selectedCategoryChanged.subscribe(
            value => {
                if (this.doesCategoryExist(value)) {
                    this.router.navigate(['/category', value]);
                }
            },
            error => {
                console.log(error);
            });
			
/*******************************************************************\
7 - In memory mock
\*******************************************************************/
1. kreirati testing folder unutar app foldera
2. kreirati category-mock.service.ts i popuniti sa:
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';

import { CategoryListModel } from "../categories/category-list/category-list.model";
import { CategoryService } from "../categories/shared/category.service";

@Injectable()
export class CategoryMockService implements CategoryService {

    getCategories(): Observable<Array<CategoryListModel>>{}
}
3. kreirati in-memory-data.service.ts u testing folderu i popuniti sa:
import { InMemoryDbService } from 'angular-in-memory-web-api';

import { CategoryListModel } from "../categories/category-list/category-list.model";

export class InMemoryDataService implements InMemoryDbService {
    createDb() {
        const categoryList: Array<CategoryListModel> = [
            { id: 1, text: "Rock" },
            { id: 2, text: "Punk" },
            { id: 3, text: "Pop" },
            { id: 4, text: "Techno" },
            { id: 5, text: "House" },
            { id: 6, text: "Klasi훾na glazba" },
            { id: 7, text: "Ostalo" },
			{ id: 8, text: "Najprodavanije" }
        ];
		return { 
            categories: categoryList
          };
    }
}
4. izmijeniti category-mock.service.ts u:
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { Http } from '@angular/http';
import 'rxjs/add/operator/map';

import { CategoryListModel } from "../category-list/category-list.model";
import { CategoryService } from "../category-list/category-list.service";

@Injectable()
export class CategoryMockService implements CategoryService {
    getCategoriesURL: string = 'api/categories';

    constructor(private http: Http){}

    getCategories(): Observable<Array<CategoryListModel>>{
        return this.http.get(this.getCategoriesURL)
        .map(response => response.json().data as Array<CategoryListModel>);
    }
}
5. dodati u app.module.ts:
import { InMemoryWebApiModule } from 'angular-in-memory-web-api';
import { HttpModule } from '@angular/http';

import { InMemoryDataService } from './testing/in-memory-data.service';
import { CategoryMockService } from "./testing/category-mock.service";

  imports: [BrowserModule,
    HttpModule,
    InMemoryWebApiModule.forRoot(InMemoryDataService),
	
  providers: [{ provide: CategoryService, useClass: CategoryMockService }],
  
/*******************************************************************\
8 - Lista produkata
\*******************************************************************/
1. kreirati products folder unutar app foldera
2. kreirati product-summary folder unutar products foldera
3. kreairati product-summary.component.ts i popuniti sa:
import { Component, Input } from '@angular/core';

@Component({
  selector: 'product-summary',
  templateUrl: './product-summary.component.html'
})
export class ProductSummaryComponent{
    @Input() productSummary: ProductSummaryModel;
}
4. kreirati product-summary.model.ts i popuniti sa:
export class ProductSummaryModel{
     id: number;
     name: string;
     description: string;
     price: number;
}
5. dodati u product-summary.component.ts:
import { ProductSummaryModel } from "./product-summary.model";
6. kreirati product-summary.component.html i preuzeti sa http://getbootstrap.com/components/#thumbnails-custom-content html:
<div class="thumbnail">
      <img src="..." alt="...">
      <div class="caption">
        <h3>Thumbnail label</h3>
        <p>...</p>
        <p><a href="#" class="btn btn-primary" role="button">Button</a> <a href="#" class="btn btn-default" role="button">Button</a></p>
      </div>
    </div>
7. u assets/image folder staviti record.png
8. preurediti product-summary.component.html u:
<div class="thumbnail">
    <img src="assets/images/record.png">
    <div class="caption">
        <h3>{{productSummary.name}}</h3>
        <p>{{productSummary.description}}</p>
        <p>Cijena: {{productSummary.price}} kn</p>
        <p><a href="#" class="btn btn-default" role="button">Dodaj u ko큄aricu</a></p>
    </div>
</div>
9. preurediti category.component.ts u:
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Params } from '@angular/router';

import { ProductSummaryModel } from "../../products/product-summary/product-summary.model";
import { CategoryService } from "../shared/category.service";

@Component({
    selector: 'category',
    templateUrl: './category.component.html'
})
export class CategoryComponent {
    id: number;
    name: string;
    productList: Array<ProductSummaryModel>;

    constructor(private route: ActivatedRoute,
    private categoryService: CategoryService) { }

    ngOnInit(): void {
        this.route.params.subscribe(
            params => {
                this.name = params["id"];
                this.id = params["id"];
                this.getCategory(this.id);
            }
        );
    }

    getCategory(id: number) {
        this.categoryService.getCategory(this.id).subscribe(
            value => {
                this.productList = value;
            },
            error => {
                this.productList = null;
                console.log(error);
            }
        );
    }
}
10. dodati u category.service.ts:
import { ProductSummaryModel } from "../../products/product-summary/product-summary.model";

getCategory(id: number): Observable<Array<ProductSummaryModel>>{
        return null;
    }
11. otvoriti category-mock.service.ts i vidjeti gre큄ku
12. dodati u category-mock.service.ts:
import { ProductSummaryModel } from "../products/product-summary/product-summary.model";

getCategoryURL: string = 'api/category/';

getCategory(id: number): Observable<Array<ProductSummaryModel>>{
        return this.http.get(this.getCategoryURL + id)
        .map(response => response.json().data.productList as Array<ProductSummaryModel>);
    }
13. dodati u in-memory-data.service.ts:
import { ProductSummaryModel } from "../products/product-summary/product-summary.model";

const productRockList: Array<ProductSummaryModel> = [
            { id: 1, name: "La Grange - ZZ Top", description: "Jedna od najpoznatijih ZZ Top pjesama. Svrstana u top 100 gitarskih pjesama svih vremena.", price: 4.25 },
            { id: 2, name: "Comfortably numb - Pink Floyd", description: "Jedna od najpoznatijih Pink Floyd pjesama. Svrstana u top 500 pjesama svih vremena.", price: 3.76 },
            { id: 3, name: "I'm Gonna Be (500 Miles) - The Proclaimers", description: "Izvorna keltska rock pjesma.", price: 4.44 },
        ];

        return {
            categories: categoryList,
            category: [{ id: 1, productList: productRockList }]
        };
14. izmjeniti category.component.html u:
<div class="col-xs-12">
    <h1>{{name}}</h1>
</div>
<div class="col-xs-12 col-lg-4" *ngFor="let product of productList">
    <product-summary [productSummary]="product"></product-summary>
</div>
15. dodati u app.module.ts:
import { ProductSummaryComponent } from "./products/product-summary/product-summary.component";
  declarations: [AppComponent, CategoryListComponent, CategoryComponent, ProductSummaryComponent],
16. dodati u in-memory-data.service.ts:
const productClassicalList: Array<ProductSummaryModel> = [
            { id: 4, name: "Dance of the Knights - Prokofiev", description: "Klasik.", price: 1.23 },
            { id: 5, name: "Claire de Lune - Claude Debussy", description: "Klasik.", price: 2.34 },
            { id: 6, name: "O Fortuna - Carl Orff", description: "Klasik.", price: 3.34 },
            { id: 7, name: "Ride of the Valkyries - Richard Wagner", description: "Klasik.", price: 3.44 },
        ];
		
            category: [
                { id: 1, productList: productRockList },
                { id: 6, productList: productClassicalList },
            ]
17. pogledati aplikaciju i primjetiti raspad prilikom 4 itema prikazana na ekranu
18. preurediti category.component.html u:
<div class="col-xs-12">
    <h1>{{name}}</h1>
</div>
<div *ngFor="let product of productList; let i = index">
    <div class="col-xs-12 col-lg-4" >
        <product-summary [productSummary]="product"></product-summary>
    </div>
    <div class="clearfix" *ngIf="(i+1) % 3 == 0"></div>
</div>

/*******************************************************************\
9 - Detalji produkta
\*******************************************************************/
1. kreirati folder product u products folderu
2. kreirati product.component.ts, product.component.html i product.model.ts
3. popuniti product.model.ts sa:
import { ProductSummaryModel } from "../product-summary/product-summary.model";

export class ProductModel extends ProductSummaryModel{
     albumName: string;
     duration: number;
}
4. preuzeti sa http://getbootstrap.com/components/#media-default i popuniti product.component.html sa:
<div class="media" *ngIf="product">
    <div class="media-left">
        <img class="media-object" src="assets/images/record.png">
    </div>
    <div class="media-body">
        <h4 class="media-heading">{{product.name}}</h4>
        <h5>{{product.albumName}}</h5>
        <p>Trajanje: {{product.duration}} s</p>
        <p>{{product.description}}</p>
        <button class="btn btn-default">Dodaj u ko큄aricu</button>
    </div>
</div>
4. popunit product.component.ts sa:
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Params } from '@angular/router';

import { ProductModel } from "./product.model";

@Component({
    selector: 'product',
    templateUrl: './product.component.html'
})
export class ProductComponent {
    id: number;
    product: ProductModel = { 
        id: 1, 
        name: "La Grange - ZZ Top", 
        description: "Jedna od najpoznatijih ZZ Top pjesama. Svrstana u top 100 gitarskih pjesama svih vremena.", 
        price: 4.25,
        albumName: "Tres Hombres",
        duration: 231
     };

    constructor(
        private route: ActivatedRoute
        ) { }

    ngOnInit(): void {
        this.route.params.subscribe(
            params => {
                this.id = params["id"];
            }
        );
    }
}
5. dodati u app.module.ts:
import { ProductComponent } from "./products/product/product.component";
declarations: [AppComponent, CategoryListComponent, CategoryComponent, ProductSummaryComponent, ProductComponent],
6. preurediti product-summary.component.html u:
<h3>
            <a (click)="goToProductDetail()">{{productSummary.name}}</a>
        </h3>
7. preurediti product-summary.component.ts u:
import { Component, Input } from '@angular/core';
import { Router } from "@angular/router";

import { ProductSummaryModel } from "./product-summary.model";

@Component({
  selector: 'product-summary',
  templateUrl: './product-summary.component.html'
})
export class ProductSummaryComponent {
  @Input() productSummary: ProductSummaryModel;

  constructor(
    private router: Router
  ) { }

  goToProductDetail(): void {
    this.router.navigate(['/product', this.productSummary.id]);
  }
}
8. dodati u app.module.ts:
{
        path: 'category/:id',
        component: CategoryComponent
      },
      {
        path: 'product/:id',
        component: ProductComponent
      }
9. provjeriti rad aplikacije
10. kreirati shared folder unutar products foldera
11. kreirati product.service.ts unutar shared foldera i popuniti sa:
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/of';

import { ProductModel } from "../product/product.model";

@Injectable()
export class ProductService {

    getProduct(id: number): Observable<ProductModel> {
        return null;
    }
}
12. kreirati product-mock.service.ts unutar testing foldera i popuniti sa:
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { Http } from '@angular/http';
import 'rxjs/add/operator/map';

import { ProductModel } from "../products/product/product.model";
import { ProductService } from "../products/shared/product.service";

@Injectable()
export class ProductMockService implements ProductService {

    getProductURL: string = 'api/product/';

    constructor(private http: Http){}

    getProduct(id: number): Observable<ProductModel>{
        return this.http.get(this.getProductURL + id)
        .map(response => response.json().data as ProductModel);
    }
}
13. dodati u in-memory-data.service.ts:
import { ProductModel } from "../products/product/product.model";

const productList: Array<ProductModel> = [
            { id: 1, name: "La Grange - ZZ Top", description: "Jedna od najpoznatijih ZZ Top pjesama. Svrstana u top 100 gitarskih pjesama svih vremena.", price: 4.25, albumName: "Tres Hombres", duration: 231 },
            { id: 2, name: "Comfortably numb - Pink Floyd", description: "Jedna od najpoznatijih Pink Floyd pjesama. Svrstana u top 500 pjesama svih vremena.", price: 3.76, albumName: "The Wall", duration: 383 },
            { id: 3, name: "I'm Gonna Be (500 Miles) - The Proclaimers", description: "Izvorna keltska rock pjesma.", price: 4.44, albumName: "Sunshine on Leith", duration: 217 },
            { id: 4, name: "Dance of the Knights - Prokofiev", description: "Klasik.", price: 1.23, albumName: "Top 100 Classics", duration: 347 },
            { id: 5, name: "Claire de Lune - Claude Debussy", description: "Klasik.", price: 2.34, albumName: "Top 100 Classics", duration: 303 },
            { id: 6, name: "O Fortuna - Carl Orff", description: "Klasik.", price: 3.34, albumName: "Top 100 Classics", duration: 322 },
            { id: 7, name: "Ride of the Valkyries - Richard Wagner", description: "Klasik.", price: 3.44, albumName: "Top 100 Classics", duration: 301 },
        ];
		
return {
            categories: categoryList,
            category: [
                { id: 1, productList: productRockList },
                { id: 6, productList: productClassicalList },
            ],
            products: productList
        };
14. dodati u app.module.ts:
import { ProductService } from "./products/shared/product.service";

import { ProductMockService } from "./testing/product-mock.service";

  providers: [
    { provide: CategoryService, useClass: CategoryMockService },
    { provide: ProductService, useClass: ProductMockService }
  ],
15. preurediti product.component.ts u:
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Params } from '@angular/router';

import { ProductModel } from "./product.model";
import { ProductService } from "../shared/product.service";

@Component({
    selector: 'product',
    templateUrl: './product.component.html'
})
export class ProductComponent {
    id: number;
    product: ProductModel;

    constructor(
        private route: ActivatedRoute,
        private productService: ProductService
        ) { }

    ngOnInit(): void {
        this.route.params.subscribe(
            params => {
                this.id = params["id"];
                this.getProduct(this.id);
            }
        );
    }

    getProduct(id: number){
        this.productService.getProduct(id).subscribe(
            value => {
                this.product = value;
            },
            error => {
                this.product = null;
                console.log(error);
            }
        );
    }
}

/*******************************************************************\
10 - Dvosmjerni servisi i direktive
\*******************************************************************/
1. dodati u category.service.ts:
import { Subject }    from 'rxjs/Subject';

currentCategoryName: Subject<string>;
    currentCategoryNameChanged: Observable<string>;
	
	setCurrentCategoryName(name: string){}
2. dodati u category-mock.service.ts:
import { Subject }    from 'rxjs/Subject';

currentCategoryName: Subject<string> = new Subject<string>();
    currentCategoryNameChanged: Observable<string> = this.currentCategoryName.asObservable();

	setCurrentCategoryName(name: string){
        this.currentCategoryName.next(name);
    }
3. dodati u category-list.component.ts:
onCategoryChanged(name: string){
        this.categoryService.setCurrentCategoryName(name);
    }
4. dodati u category-list.component.html:
(click)="onCategoryChanged(category.text)"
5. category.component.ts preurediti u:
    ngOnInit(): void {
        this.route.params.subscribe(
            params => {
                this.id = params["id"];
                this.getCategory(this.id);
            }
        );

        this.categoryService.currentCategoryNameChanged.subscribe(
            value => {
                this.name = value;
            }
        )
    }
6. pokrenuti aplikaciju i pokazati dohvat imena; primjetiti da ru훾ni upis linka ne postavlja ime; pitati kako rije큄iti problem
7. kreirati shared folder unutar app foldera
8. kreirati rotate-on-hover folder unutar shared foldera
9. u rotate-on-hover folder dodati rotate-on-hover.directive.ts i popuniti sa:
import { Directive, HostListener, Renderer2, ElementRef } from '@angular/core';

@Directive({
    selector: "img[rotateOnHover]"
})
export class RotateOnHoverDirective{

    constructor(
        private renderer: Renderer2,
        private el: ElementRef
    ){}

    @HostListener("mouseenter") onMouseEnter() {
        this.hover(true);
        console.log("true");
    }

    @HostListener("mouseleave") onMouseLeave() {
        this.hover(false);
    }

    hover(shouldRotate: boolean){
        if(shouldRotate){
            this.renderer.addClass(this.el.nativeElement, "spin");
        } 
        else {
            this.renderer.removeClass(this.el.nativeElement, "spin");
        }
    }
}
10. u app.module.ts dodati:
import { RotateOnHoverDirective } from "./shared/rotate-on-hover/rotate-on-hover.directive";

declarations: [AppComponent, CategoryListComponent, CategoryComponent, ProductSummaryComponent, ProductComponent, RotateOnHoverDirective],
11. u product-summary.component.ts dodati:
<img rotateOnHover src="assets/images/record.png">

/*******************************************************************\
11 - Spajanje s Web-API
\*******************************************************************/
1. pokrenuti web-api server
2. preurediti category.service.ts u:
import 'rxjs/add/operator/map';

    currentCategoryName: Subject<string> = new Subject<string>();
    currentCategoryNameChanged: Observable<string> = this.currentCategoryName.asObservable();

    categoriesBaseURL: string = "http://localhost:63286/";
    getCategoriesURL: string = this.categoriesBaseURL +  "api/categories/get-all-categories";
    getCategoryURL: string = this.categoriesBaseURL +  "api/categories/get-products/";

    constructor(private http: Http){}

    getCategories(): Observable<Array<CategoryListModel>>{
        return this.http.get(this.getCategoriesURL)
        .map(response => response.json() as Array<CategoryListModel>);      
    }

    getCategory(id: number): Observable<Array<ProductSummaryModel>>{
        return this.http.get(this.getCategoryURL + id)
        .map(response => response.json() as Array<ProductSummaryModel>);
    }

    setCurrentCategoryName(name: string){
        this.currentCategoryName.next(name);
    }
3. izmjeniti u app.module.ts:
//import { CategoryMockService } from "./testing/category-mock.service";

    //InMemoryWebApiModule.forRoot(InMemoryDataService),
	
    { provide: CategoryService, useClass: CategoryService },
4. iskomentirati cijeli category-mock.service.ts i objasniti problem private varijabli kod mixina
5. pokrenuti aplikaciju, primjetiti CORS error
6. u web api projektu omogu훶iti cors
7. provjeriti aplikaciju, uo훾iti u훾itavanje kategorija
8. preurediti product.service.ts u:
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { Http } from "@angular/http";
import 'rxjs/add/observable/of';
import 'rxjs/add/operator/map';

import { ProductModel } from "../product/product.model";

@Injectable()
export class ProductService {

    getProductURL: string = 'http://localhost:63286/api/products/';

    constructor(private http: Http){}

    getProduct(id: number): Observable<ProductModel>{
        return this.http.get(this.getProductURL + id)
        .map(response => response.json() as ProductModel);
    }
}
9. iskomentirati product-mock.service.ts
10. izmjeniti app.module.ts:
//import { ProductMockService } from "./testing/product-mock.service";

  providers: [
    { provide: CategoryService, useClass: CategoryService },
    { provide: ProductService, useClass: ProductService }
  ],